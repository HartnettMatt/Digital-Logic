$date
	Tue Apr  7 21:45:01 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb $end
$var wire 8 ! testHEX1 [7:0] $end
$var wire 8 " testHEX2 [7:0] $end
$var wire 8 # testHEX3 [7:0] $end
$var wire 8 $ testHEX4 [7:0] $end
$var wire 8 % testHEX5 [7:0] $end
$var wire 10 & testLED [9:0] $end
$var wire 8 ' testHEX0 [7:0] $end
$var reg 1 ( clock $end
$var reg 8 ) counter [7:0] $end
$var reg 2 * testKEY [1:0] $end
$var reg 8 + testSW [7:0] $end
$scope module DUT $end
$var wire 1 ( ADC_CLK_10 $end
$var wire 2 , KEY [1:0] $end
$var wire 8 - SW [7:0] $end
$var wire 3 . r_LEDS [2:0] $end
$var wire 3 / l_LEDS [2:0] $end
$var wire 1 0 clock $end
$var wire 8 1 HEX0 [7:0] $end
$var reg 10 2 LEDR [9:0] $end
$var reg 3 3 left_LEDs [2:0] $end
$var reg 3 4 right_LEDs [2:0] $end
$scope module B0 $end
$var wire 1 5 hazards $end
$var wire 1 6 reset_n $end
$var wire 1 7 turnChange $end
$var wire 8 8 hex [7:0] $end
$var wire 1 0 clock $end
$var reg 2 9 blink [1:0] $end
$var reg 2 : blinkState [1:0] $end
$var reg 3 ; leftLEDs [2:0] $end
$var reg 2 < next [1:0] $end
$var reg 3 = rightLEDs [0:2] $end
$scope module H0 $end
$var wire 2 > val [1:0] $end
$var reg 8 ? seg [7:0] $end
$upscope $end
$upscope $end
$scope module C0 $end
$var wire 1 ( clock_in $end
$var wire 32 @ divide_by [31:0] $end
$var wire 1 A reset_n $end
$var reg 23 B clock_divider [22:0] $end
$var reg 1 0 clock_out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 B
0A
b1 @
b11000000 ?
b0 >
b0 =
b1 <
b0 ;
b0 :
b0 9
b11000000 8
07
06
05
b0 4
b0 3
b0 2
b11000000 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b11000000 '
b0 &
bz %
bz $
bz #
bz "
bz !
$end
#100
b1 )
1(
#200
b10 )
0(
#300
b11 )
1(
#400
1A
16
b100 )
b1 *
b1 ,
0(
#500
b1 4
b1 3
b1 9
b1 .
b1 =
b1 /
b1 ;
b10 <
b11111001 '
b11111001 1
b11111001 8
b11111001 ?
b1 :
b1 >
10
b101 )
1(
#600
b10000100 &
b10000100 2
15
b110 )
b1 +
b1 -
0(
#700
00
b111 )
1(
#800
b1000 )
0(
#900
b11 4
b11 3
b10 9
b11 .
b11 =
b11 /
b11 ;
b11 <
b10100100 '
b10100100 1
b10100100 8
b10100100 ?
b10 :
b10 >
10
b1001 )
1(
#1000
b1010 )
0(
#1100
00
b1011 )
1(
#1200
b1100 )
0(
#1300
b111 4
b111 3
b11 9
b111 .
b111 =
b111 /
b111 ;
b0 <
b10110000 '
b10110000 1
b10110000 8
b10110000 ?
b11 :
b11 >
10
b1101 )
1(
#1400
b1110 )
0(
#1500
00
b1111 )
1(
#1600
b10000 )
0(
#1700
b0 4
b0 3
b0 9
b0 .
b0 =
b0 /
b0 ;
b1 <
b11000000 '
b11000000 1
b11000000 8
b11000000 ?
b0 :
b0 >
10
b10001 )
1(
#1800
b10010 )
0(
#1900
00
b10011 )
1(
#2000
b10100 )
0(
#2100
b1 4
b1 3
b1 9
b1 .
b1 =
b1 /
b1 ;
b10 <
b11111001 '
b11111001 1
b11111001 8
b11111001 ?
b1 :
b1 >
10
b10101 )
1(
#2200
b10110 )
0(
#2300
00
b10111 )
1(
#2400
b11000 )
0(
#2500
b11 4
b11 3
b10 9
b11 .
b11 =
b11 /
b11 ;
b11 <
b10100100 '
b10100100 1
b10100100 8
b10100100 ?
b10 :
b10 >
10
b11001 )
1(
#2600
b11010 )
0(
#2700
00
b11011 )
1(
#2800
b11100 )
0(
#2900
b111 4
b111 3
b11 9
b111 .
b111 =
b111 /
b111 ;
b0 <
b10110000 '
b10110000 1
b10110000 8
b10110000 ?
b11 :
b11 >
10
b11101 )
1(
#3000
b11110 )
0(
#3100
00
b11111 )
1(
#3200
b100000 )
0(
#3300
