$date
	Tue Apr  7 22:48:07 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb $end
$var wire 10 ! testLED [9:0] $end
$var wire 8 " testHEX0 [7:0] $end
$var reg 1 # clock $end
$var reg 8 $ counter [7:0] $end
$var reg 2 % testKEY [1:0] $end
$var reg 10 & testSW [9:0] $end
$scope module DUT $end
$var wire 1 # ADC_CLK_10 $end
$var wire 2 ' KEY [1:0] $end
$var wire 10 ( SW [9:0] $end
$var wire 3 ) r_LEDS [2:0] $end
$var wire 3 * l_LEDS [2:0] $end
$var wire 1 + clock $end
$var wire 8 , HEX0 [7:0] $end
$var reg 10 - LEDR [9:0] $end
$var reg 3 . left_LEDs [2:0] $end
$var reg 1 / reset $end
$var reg 3 0 right_LEDs [2:0] $end
$scope module B0 $end
$var wire 1 1 hazards $end
$var wire 1 / reset_n $end
$var wire 1 2 turnChange $end
$var wire 8 3 hex [7:0] $end
$var wire 1 + clock $end
$var reg 2 4 blink [1:0] $end
$var reg 2 5 blinkState [1:0] $end
$var reg 3 6 leftLEDs [2:0] $end
$var reg 2 7 next [1:0] $end
$var reg 3 8 rightLEDs [0:2] $end
$scope module H0 $end
$var wire 2 9 val [1:0] $end
$var reg 8 : seg [7:0] $end
$upscope $end
$upscope $end
$scope module C0 $end
$var wire 1 # clock_in $end
$var wire 32 ; divide_by [31:0] $end
$var wire 1 < reset_n $end
$var reg 23 = clock_divider [22:0] $end
$var reg 1 + clock_out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 =
0<
b1 ;
b11000000 :
b0 9
b0 8
b1 7
b0 6
b0 5
b0 4
b11000000 3
02
01
b0 0
0/
b0 .
b0 -
b11000000 ,
0+
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
0#
b11000000 "
b0 !
$end
#100
b1 $
1#
#200
b10 $
0#
#300
b11 $
1#
#400
1<
b100 $
b1 %
b1 '
0#
#500
1+
b101 $
1#
#600
b1110000111 !
b1110000111 -
1/
b110 $
b100 &
b100 (
0#
#700
0+
b111 $
1#
#800
b1000 $
0#
#900
b1 0
b1 .
b1 4
b1 )
b1 8
b1 *
b1 6
b10 7
b11111001 "
b11111001 ,
b11111001 3
b11111001 :
b1 5
b1 9
1+
b1001 $
1#
#1000
b1010 $
0#
#1100
0+
b1011 $
1#
#1200
b1100 $
0#
#1300
b11 0
b11 .
b10 4
b11 )
b11 8
b11 *
b11 6
b11 7
b10100100 "
b10100100 ,
b10100100 3
b10100100 :
b10 5
b10 9
1+
b1101 $
1#
#1400
b1110 $
0#
#1500
0+
b1111 $
1#
#1600
b10000 $
0#
#1700
b111 0
b111 .
b11 4
b111 )
b111 8
b111 *
b111 6
b0 7
b10110000 "
b10110000 ,
b10110000 3
b10110000 :
b11 5
b11 9
1+
b10001 $
1#
#1800
b10010 $
0#
#1900
0+
b10011 $
1#
#2000
b10100 $
0#
#2100
b0 0
b0 .
b0 4
b0 )
b0 8
b0 *
b0 6
b1 7
b11000000 "
b11000000 ,
b11000000 3
b11000000 :
b0 5
b0 9
1+
b10101 $
1#
#2200
b10110 $
0#
#2300
0+
b10111 $
1#
#2400
b11000 $
0#
#2500
b1 0
b1 .
b1 4
b1 )
b1 8
b1 *
b1 6
b10 7
b11111001 "
b11111001 ,
b11111001 3
b11111001 :
b1 5
b1 9
1+
b11001 $
1#
#2600
b11010 $
0#
#2700
0+
b11011 $
1#
#2800
b11100 $
0#
#2900
b11 0
b11 .
b10 4
b11 )
b11 8
b11 *
b11 6
b11 7
b10100100 "
b10100100 ,
b10100100 3
b10100100 :
b10 5
b10 9
1+
b11101 $
1#
#3000
b11110 $
0#
#3100
0+
b11111 $
1#
#3200
b100000 $
0#
#3300
