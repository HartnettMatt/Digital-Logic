$date
	Wed Feb 19 15:28:38 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb2 $end
$var wire 10 ! testLED [9:0] $end
$var wire 8 " testHEX5 [7:0] $end
$var wire 8 # testHEX4 [7:0] $end
$var wire 8 $ testHEX3 [7:0] $end
$var wire 8 % testHEX2 [7:0] $end
$var wire 8 & testHEX1 [7:0] $end
$var wire 8 ' testHEX0 [7:0] $end
$var reg 10 ( testSW [9:0] $end
$scope module DUT $end
$var wire 10 ) leds [9:0] $end
$var wire 10 * switch [9:0] $end
$var wire 8 + hex4 [7:0] $end
$var wire 8 , hex0 [7:0] $end
$var reg 8 - hex1 [7:0] $end
$var reg 8 . hex2 [7:0] $end
$var reg 8 / hex3 [7:0] $end
$var reg 8 0 hex5 [7:0] $end
$var reg 10 1 leds2 [9:0] $end
$scope module U0 $end
$var wire 4 2 val [3:0] $end
$var reg 8 3 seg [7:0] $end
$upscope $end
$scope module U1 $end
$var wire 4 4 val [3:0] $end
$var reg 8 5 seg [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module top $end
$var wire 2 6 KEY [1:0] $end
$var wire 10 7 SW [9:0] $end
$var wire 10 8 ledsb [9:0] $end
$var wire 10 9 ledsa [9:0] $end
$var wire 8 : hex5b [7:0] $end
$var wire 8 ; hex5a [7:0] $end
$var wire 8 < hex4b [7:0] $end
$var wire 8 = hex4a [7:0] $end
$var wire 8 > hex3b [7:0] $end
$var wire 8 ? hex3a [7:0] $end
$var wire 8 @ hex2b [7:0] $end
$var wire 8 A hex2a [7:0] $end
$var wire 8 B hex1b [7:0] $end
$var wire 8 C hex1a [7:0] $end
$var wire 8 D hex0b [7:0] $end
$var wire 8 E hex0a [7:0] $end
$var reg 8 F HEX0 [7:0] $end
$var reg 8 G HEX1 [7:0] $end
$var reg 8 H HEX2 [7:0] $end
$var reg 8 I HEX3 [7:0] $end
$var reg 8 J HEX4 [7:0] $end
$var reg 8 K HEX5 [7:0] $end
$var reg 10 L LEDR [9:0] $end
$scope module U0 $end
$var wire 2 M key [1:0] $end
$var wire 10 N leds [9:0] $end
$var wire 8 O switch [7:0] $end
$var wire 8 P hex5 [7:0] $end
$var wire 8 Q hex4 [7:0] $end
$var wire 8 R hex3 [7:0] $end
$var wire 8 S hex2 [7:0] $end
$var wire 8 T hex1 [7:0] $end
$var wire 8 U hex0 [7:0] $end
$var reg 10 V leds1 [9:0] $end
$var reg 4 W seg2 [3:0] $end
$scope module S0 $end
$var wire 4 X val [3:0] $end
$var reg 8 Y seg [7:0] $end
$upscope $end
$scope module S1 $end
$var wire 4 Z val [3:0] $end
$var reg 8 [ seg [7:0] $end
$upscope $end
$scope module S2 $end
$var wire 4 \ val [3:0] $end
$var reg 8 ] seg [7:0] $end
$upscope $end
$scope module S3 $end
$var wire 4 ^ val [3:0] $end
$var reg 8 _ seg [7:0] $end
$upscope $end
$scope module S4 $end
$var wire 4 ` val [3:0] $end
$var reg 8 a seg [7:0] $end
$upscope $end
$scope module S5 $end
$var wire 4 b val [3:0] $end
$var reg 8 c seg [7:0] $end
$upscope $end
$upscope $end
$scope module U1 $end
$var wire 10 d leds [9:0] $end
$var wire 10 e switch [9:0] $end
$var wire 8 f hex4 [7:0] $end
$var wire 8 g hex0 [7:0] $end
$var reg 8 h hex1 [7:0] $end
$var reg 8 i hex2 [7:0] $end
$var reg 8 j hex3 [7:0] $end
$var reg 8 k hex5 [7:0] $end
$var reg 10 l leds2 [9:0] $end
$scope module U0 $end
$var wire 4 m val [3:0] $end
$var reg 8 n seg [7:0] $end
$upscope $end
$scope module U1 $end
$var wire 4 o val [3:0] $end
$var reg 8 p seg [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 p
bz o
b0 n
bz m
b100 l
b10000110 k
b11111111 j
b11111111 i
b10000110 h
b0 g
b0 f
bz e
b100 d
b11000000 c
b0 b
b10000000 a
b1000 `
b10100100 _
b10 ^
b10011001 ]
b100 \
b11000000 [
b0 Z
b11111001 Y
b1 X
b100 W
b0xxxxxxxx V
b11111001 U
b11000000 T
b10011001 S
b10100100 R
b10000000 Q
b11000000 P
bz O
b0xxxxxxxx N
bz M
b100 L
b10000110 K
b0 J
b11111111 I
b11111111 H
b10000110 G
b0 F
b11111001 E
b0 D
b11000000 C
b10000110 B
b10011001 A
b11111111 @
b10100100 ?
b11111111 >
b10000000 =
b0 <
b11000000 ;
b10000110 :
b0xxxxxxxx 9
b100 8
bz 7
bz 6
b11000000 5
b0 4
b11000000 3
b0 2
b100 1
b10000110 0
b11111111 /
b11111111 .
b10000110 -
b11000000 ,
b11000000 +
b0 *
b100 )
b0 (
b11000000 '
b10000110 &
b11111111 %
b11111111 $
b11000000 #
b10000110 "
b100 !
$end
#100
b11111001 '
b11111001 ,
b11111001 3
b11000111 "
b11000111 0
b11111111 &
b11111111 -
b1 !
b1 )
b1 1
b1 2
b1 (
b1 *
#200
b11111001 #
b11111001 +
b11111001 5
b10000110 "
b10000110 0
b10000110 &
b10000110 -
b100 !
b100 )
b100 1
b1 4
b10001 (
b10001 *
#300
b11000000 '
b11000000 ,
b11000000 3
b11111111 "
b11111111 0
b11000111 &
b11000111 -
b10 !
b10 )
b10 1
b0 2
b10000 (
b10000 *
#400
b11000000 #
b11000000 +
b11000000 5
b10000110 "
b10000110 0
b10000110 &
b10000110 -
b100 !
b100 )
b100 1
b0 4
b0 (
b0 *
#600
b11111001 '
b11111001 ,
b11111001 3
b11000111 "
b11000111 0
b11111111 &
b11111111 -
b1 !
b1 )
b1 1
b1 2
b1 (
b1 *
#700
b10100100 '
b10100100 ,
b10100100 3
b1 !
b1 )
b1 1
b10 2
b10 (
b10 *
#800
b10110000 '
b10110000 ,
b10110000 3
b1 !
b1 )
b1 1
b11 2
b11 (
b11 *
#900
b10011001 '
b10011001 ,
b10011001 3
b1 !
b1 )
b1 1
b100 2
b100 (
b100 *
#1000
b10010010 '
b10010010 ,
b10010010 3
b1 !
b1 )
b1 1
b101 2
b101 (
b101 *
#1100
b10000010 '
b10000010 ,
b10000010 3
b1 !
b1 )
b1 1
b110 2
b110 (
b110 *
#1200
b11111000 '
b11111000 ,
b11111000 3
b1 !
b1 )
b1 1
b111 2
b111 (
b111 *
#1300
b10000000 '
b10000000 ,
b10000000 3
b1 !
b1 )
b1 1
b1000 2
b1000 (
b1000 *
#1400
b10011000 '
b10011000 ,
b10011000 3
b1 !
b1 )
b1 1
b1001 2
b1001 (
b1001 *
#1500
b1000 '
b1000 ,
b1000 3
b1 !
b1 )
b1 1
b1010 2
b1010 (
b1010 *
#1600
b0 '
b0 ,
b0 3
b1 !
b1 )
b1 1
b1011 2
b1011 (
b1011 *
#1700
b1000110 '
b1000110 ,
b1000110 3
b1 !
b1 )
b1 1
b1100 2
b1100 (
b1100 *
#1800
b1000000 '
b1000000 ,
b1000000 3
b1 !
b1 )
b1 1
b1101 2
b1101 (
b1101 *
#1900
b110 '
b110 ,
b110 3
b1 !
b1 )
b1 1
b1110 2
b1110 (
b1110 *
#2000
b1110 '
b1110 ,
b1110 3
b1 !
b1 )
b1 1
b1111 2
b1111 (
b1111 *
#2100
b11000000 '
b11000000 ,
b11000000 3
b10000110 "
b10000110 0
b10000110 &
b10000110 -
b100 !
b100 )
b100 1
b0 2
b0 (
b0 *
#2200
b11111001 #
b11111001 +
b11111001 5
b11111111 "
b11111111 0
b11000111 &
b11000111 -
b10 !
b10 )
b10 1
b1 4
b10000 (
b10000 *
#2300
b10100100 #
b10100100 +
b10100100 5
b10 !
b10 )
b10 1
b10 4
b100000 (
b100000 *
#2400
b10110000 #
b10110000 +
b10110000 5
b10 !
b10 )
b10 1
b11 4
b110000 (
b110000 *
#2500
b10011001 #
b10011001 +
b10011001 5
b10 !
b10 )
b10 1
b100 4
b1000000 (
b1000000 *
#2600
b10010010 #
b10010010 +
b10010010 5
b10 !
b10 )
b10 1
b101 4
b1010000 (
b1010000 *
#2700
b10000010 #
b10000010 +
b10000010 5
b10 !
b10 )
b10 1
b110 4
b1100000 (
b1100000 *
#2800
b11111000 #
b11111000 +
b11111000 5
b10 !
b10 )
b10 1
b111 4
b1110000 (
b1110000 *
#2900
b10000000 #
b10000000 +
b10000000 5
b10 !
b10 )
b10 1
b1000 4
b10000000 (
b10000000 *
#3000
b10011000 #
b10011000 +
b10011000 5
b10 !
b10 )
b10 1
b1001 4
b10010000 (
b10010000 *
#3100
b1000 #
b1000 +
b1000 5
b10 !
b10 )
b10 1
b1010 4
b10100000 (
b10100000 *
#3200
b0 #
b0 +
b0 5
b10 !
b10 )
b10 1
b1011 4
b10110000 (
b10110000 *
#3300
b1000110 #
b1000110 +
b1000110 5
b10 !
b10 )
b10 1
b1100 4
b11000000 (
b11000000 *
#3400
b1000000 #
b1000000 +
b1000000 5
b10 !
b10 )
b10 1
b1101 4
b11010000 (
b11010000 *
#3500
b110 #
b110 +
b110 5
b10 !
b10 )
b10 1
b1110 4
b11100000 (
b11100000 *
#3600
b1110 #
b1110 +
b1110 5
b10 !
b10 )
b10 1
b1111 4
b11110000 (
b11110000 *
#3700
b11000000 #
b11000000 +
b11000000 5
b10000110 "
b10000110 0
b10000110 &
b10000110 -
b100 !
b100 )
b100 1
b0 4
b0 (
b0 *
#3800
