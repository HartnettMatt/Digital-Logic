$date
	Thu Feb 20 08:03:40 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tbtop $end
$var wire 10 ! testLED [9:0] $end
$var wire 8 " testHEX5 [7:0] $end
$var wire 8 # testHEX4 [7:0] $end
$var wire 8 $ testHEX3 [7:0] $end
$var wire 8 % testHEX2 [7:0] $end
$var wire 8 & testHEX1 [7:0] $end
$var wire 8 ' testHEX0 [7:0] $end
$var reg 2 ( testKEY [1:0] $end
$var reg 10 ) testSW [9:0] $end
$scope module DUT $end
$var wire 2 * KEY [1:0] $end
$var wire 10 + SW [9:0] $end
$var wire 10 , ledsb [9:0] $end
$var wire 10 - ledsa [9:0] $end
$var wire 8 . hex5b [7:0] $end
$var wire 8 / hex5a [7:0] $end
$var wire 8 0 hex4b [7:0] $end
$var wire 8 1 hex4a [7:0] $end
$var wire 8 2 hex3b [7:0] $end
$var wire 8 3 hex3a [7:0] $end
$var wire 8 4 hex2b [7:0] $end
$var wire 8 5 hex2a [7:0] $end
$var wire 8 6 hex1b [7:0] $end
$var wire 8 7 hex1a [7:0] $end
$var wire 8 8 hex0b [7:0] $end
$var wire 8 9 hex0a [7:0] $end
$var reg 8 : HEX0 [7:0] $end
$var reg 8 ; HEX1 [7:0] $end
$var reg 8 < HEX2 [7:0] $end
$var reg 8 = HEX3 [7:0] $end
$var reg 8 > HEX4 [7:0] $end
$var reg 8 ? HEX5 [7:0] $end
$var reg 10 @ LEDR [9:0] $end
$scope module U0 $end
$var wire 2 A key [1:0] $end
$var wire 10 B leds [9:0] $end
$var wire 10 C switch [9:0] $end
$var wire 8 D hex5 [7:0] $end
$var wire 8 E hex4 [7:0] $end
$var wire 8 F hex3 [7:0] $end
$var wire 8 G hex2 [7:0] $end
$var wire 8 H hex1 [7:0] $end
$var wire 8 I hex0 [7:0] $end
$var reg 10 J leds1 [9:0] $end
$var reg 4 K seg2 [3:0] $end
$scope module S0 $end
$var wire 4 L val [3:0] $end
$var reg 8 M seg [7:0] $end
$upscope $end
$scope module S1 $end
$var wire 4 N val [3:0] $end
$var reg 8 O seg [7:0] $end
$upscope $end
$scope module S2 $end
$var wire 4 P val [3:0] $end
$var reg 8 Q seg [7:0] $end
$upscope $end
$scope module S3 $end
$var wire 4 R val [3:0] $end
$var reg 8 S seg [7:0] $end
$upscope $end
$scope module S4 $end
$var wire 4 T val [3:0] $end
$var reg 8 U seg [7:0] $end
$upscope $end
$scope module S5 $end
$var wire 4 V val [3:0] $end
$var reg 8 W seg [7:0] $end
$upscope $end
$upscope $end
$scope module U1 $end
$var wire 10 X leds [9:0] $end
$var wire 10 Y switch [9:0] $end
$var wire 8 Z hex4 [7:0] $end
$var wire 8 [ hex0 [7:0] $end
$var reg 8 \ hex1 [7:0] $end
$var reg 8 ] hex2 [7:0] $end
$var reg 8 ^ hex3 [7:0] $end
$var reg 8 _ hex5 [7:0] $end
$var reg 10 ` leds2 [9:0] $end
$scope module U0 $end
$var wire 4 a val [3:0] $end
$var reg 8 b seg [7:0] $end
$upscope $end
$scope module U1 $end
$var wire 4 c val [3:0] $end
$var reg 8 d seg [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11000000 d
b0 c
b11000000 b
b0 a
b100 `
b10000110 _
b11111111 ^
b11111111 ]
b10000110 \
b11000000 [
b11000000 Z
b0 Y
b100 X
b11000000 W
b0 V
b10000000 U
b1000 T
b10100100 S
b10 R
b10011001 Q
b100 P
b11000000 O
b0 N
b11111001 M
b1 L
b100 K
b0 J
b11111001 I
b11000000 H
b10011001 G
b10100100 F
b10000000 E
b11000000 D
b0 C
b0 B
b0 A
b0 @
b11000000 ?
b10000000 >
b10100100 =
b10110000 <
b11000000 ;
b11111001 :
b11111001 9
b11000000 8
b11000000 7
b10000110 6
b10011001 5
b11111111 4
b10100100 3
b11111111 2
b10000000 1
b11000000 0
b11000000 /
b10000110 .
b0 -
b100 ,
b0 +
b0 *
b0 )
b0 (
b11111001 '
b11000000 &
b10110000 %
b10100100 $
b10000000 #
b11000000 "
b0 !
$end
#100
b10000110 "
b10000110 ?
b11000000 #
b11000000 >
b11111111 $
b11111111 =
b11111111 %
b11111111 <
b10000110 &
b10000110 ;
b11000000 '
b11000000 :
b100 !
b100 @
b1000000000 )
b1000000000 +
b1000000000 C
b1000000000 Y
#200
b11000000 "
b11000000 ?
b10000000 #
b10000000 >
b10100100 $
b10100100 =
b10011001 %
b10011001 <
b11000000 &
b11000000 ;
b11111001 '
b11111001 :
b0 !
b0 @
b0 )
b0 +
b0 C
b0 Y
#300
